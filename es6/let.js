//let允许你声明一个作用域被限制在块级中的变量、语句或者表达式。与var关键字不同的是，它声明的变量只能是全局或者整个函数块的。
//var命令会发生”变量提升“现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。let 声明的变量，只能声明后才能使用，不然会报错
//只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。
//let不允许在相同作用域内，重复声明同一个变量。
/*
ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。
第一种场景，内层变量可能会覆盖外层变量。var a ; if{ var a; }
第二种场景，用来计数的循环变量泄露为全局变量。for var
*/
//ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于let，在块级作用域之外不可引用。

// var 声明
var a = [];
for (var i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 10a

// let 声明
var a = [];
for (let i = 0; i < 10; i++) {
  a[i] = function () {
    console.log(i);
  };
}
a[6](); // 6

//使用let 声明一个块级作用域后，这个变量就只存在于这个块级作用域中，不会受全局影响。
//所以也可以用来替代闭包函数获取上下文环境 闭包IIFE

//http://es6.ruanyifeng.com/#docs/let